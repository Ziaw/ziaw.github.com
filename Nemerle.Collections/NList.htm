<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>NList -  Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul><li>
          <a href="../Nemerle/index.htm">Nemerle</a>
      </li><li>
          <a href="../Nemerle.Builtins/index.htm">Nemerle.Builtins</a>
      </li><li>
          <a href="../Nemerle.Collections/index.htm" class="current">Nemerle.Collections</a>
      </li><li>
          <a href="../Nemerle.Compiler/index.htm">Nemerle.Compiler</a>
      </li><li>
          <a href="../Nemerle.Concurrency/index.htm">Nemerle.Concurrency</a>
      </li><li>
          <a href="../Nemerle.Core/index.htm">Nemerle.Core</a>
      </li><li>
          <a href="../Nemerle.Diagnostics/index.htm">Nemerle.Diagnostics</a>
      </li><li>
          <a href="../Nemerle.Extensions/index.htm">Nemerle.Extensions</a>
      </li><li>
          <a href="../Nemerle.Hacks/index.htm">Nemerle.Hacks</a>
      </li><li>
          <a href="../Nemerle.Internal/index.htm">Nemerle.Internal</a>
      </li><li>
          <a href="../Nemerle.IO/index.htm">Nemerle.IO</a>
      </li><li>
          <a href="../Nemerle.Late/index.htm">Nemerle.Late</a>
      </li><li>
          <a href="../Nemerle.Utility/index.htm">Nemerle.Utility</a>
      </li><li>
          <a href="../StringTemplate/index.htm">StringTemplate</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in Nemerle.Collections</h2>
	<div class="scroll">
		<ul><li>
            <a href="../Nemerle.Collections/EmptyCollection.htm">EmptyCollection</a>
        </li><li>
            <a href="../Nemerle.Collections/EmptyHeap.htm">EmptyHeap</a>
        </li><li>
            <a href="../Nemerle.Collections/Hashtable`2.htm">Hashtable[TKey, TValue]</a>
        </li><li>
            <a href="../Nemerle.Collections/Heap`1.htm">Heap[T]</a>
        </li><li>
            <a href="../Nemerle.Collections/ICollection`1.htm">ICollection['a]</a>
        </li><li>
            <a href="../Nemerle.Collections/ICovariantEnumerable`1.htm">ICovariantEnumerable[T]</a>
        </li><li>
            <a href="../Nemerle.Collections/ICovariantEnumerator`1.htm">ICovariantEnumerator[T]</a>
        </li><li>
            <a href="../Nemerle.Collections/ICovariantList`1.htm">ICovariantList[T]</a>
        </li><li>
            <a href="../Nemerle.Collections/LinkedList`1.htm">LinkedList['a]</a>
        </li><li>
            <a href="../Nemerle.Collections/ListEnumerator`1.htm">ListEnumerator[T]</a>
        </li><li>
            <a href="../Nemerle.Collections/Map`2.htm">Map[TKey, TValue]</a>
        </li><li>
            <a href="../Nemerle.Collections/NCollectionsExtensions.htm">NCollectionsExtensions</a>
        </li><li>
            <a href="../Nemerle.Collections/Nil.htm">Nil</a>
        </li><li>
            <a href="../Nemerle.Collections/NList.htm" class="current">NList</a>
        </li><li>
            <a href="../Nemerle.Collections/One.htm">One</a>
        </li><li>
            <a href="../Nemerle.Collections/Pair`1.htm">Pair['a]</a>
        </li><li>
            <a href="../Nemerle.Collections/Queue`1.htm">Queue['a]</a>
        </li><li>
            <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>
        </li><li>
            <a href="../Nemerle.Collections/Seq`1.htm">Seq[T]</a>
        </li><li>
            <a href="../Nemerle.Collections/Set`1.htm">Set[T]</a>
        </li><li>
            <a href="../Nemerle.Collections/Stack`1.htm">Stack['a]</a>
        </li><li>
            <a href="../Nemerle.Collections/Zero.htm">Zero</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> NList</p>
		<p><strong>Namespace</strong> Nemerle.Collections</p>
	</div>
    <div class="sub-header">


			<h3 class="section">Methods</h3>
			<ul><li><a href="../Nemerle.Collections/NList.htm#Append``1">Append.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#AsList``1">AsList.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Assoc``2">Assoc.[T, TSecond]</a></li><li><a href="../Nemerle.Collections/NList.htm#Combine``2">Combine.[T, TSecond]</a></li><li><a href="../Nemerle.Collections/NList.htm#Compare``1">Compare.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Compare``1">Compare.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Concat``1">Concat.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#ConcatRev``1">ConcatRev.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Contains``1">Contains.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#ContainsRef``1">ContainsRef.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Copy``1">Copy.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#DivideLast``1">DivideLast.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Equals``1">Equals.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Equals``2">Equals.[T1, TSecond]</a></li><li><a href="../Nemerle.Collections/NList.htm#Exists``1">Exists.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Exists2``2">Exists2.[T, TSecond]</a></li><li><a href="../Nemerle.Collections/NList.htm#Filter``1">Filter.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#FilteredLength``1">FilteredLength.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Find``1">Find.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#FindAll``1">FindAll.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Flatten``1">Flatten.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#FoldLeft``2">FoldLeft.[T, TOut]</a></li><li><a href="../Nemerle.Collections/NList.htm#FoldLeft2``3">FoldLeft2.[TFirst, TSecond, TOut]</a></li><li><a href="../Nemerle.Collections/NList.htm#FoldRight``2">FoldRight.[T, TOut]</a></li><li><a href="../Nemerle.Collections/NList.htm#FoldRight2``3">FoldRight2.[TFirst, TSecond, TOut]</a></li><li><a href="../Nemerle.Collections/NList.htm#ForAll``1">ForAll.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#ForAll2``2">ForAll2.[T, TSecond]</a></li><li><a href="../Nemerle.Collections/NList.htm#FromArray``1">FromArray.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Group``1">Group.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Hd``1">Hd.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Head``1">Head.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#IsEmpty``1">IsEmpty.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Iter``1">Iter.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Iter2``2">Iter2.[T, TOut]</a></li><li><a href="../Nemerle.Collections/NList.htm#Last``1">Last.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Length``1">Length.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Map``2">Map.[T, TOut]</a></li><li><a href="../Nemerle.Collections/NList.htm#Map2``3">Map2.[T, TSecond, TOut]</a></li><li><a href="../Nemerle.Collections/NList.htm#MapFiltered``2">MapFiltered.[T, TOut]</a></li><li><a href="../Nemerle.Collections/NList.htm#MapFromArray``2">MapFromArray.[T, TOut]</a></li><li><a href="../Nemerle.Collections/NList.htm#MemAssoc``2">MemAssoc.[T, TSecond]</a></li><li><a href="../Nemerle.Collections/NList.htm#Member``1">Member.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Nth``1">Nth.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Partition``1">Partition.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Product``1">Product.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Range">Range</a></li><li><a href="../Nemerle.Collections/NList.htm#Range">Range</a></li><li><a href="../Nemerle.Collections/NList.htm#Range">Range</a></li><li><a href="../Nemerle.Collections/NList.htm#Range">Range</a></li><li><a href="../Nemerle.Collections/NList.htm#Remove``1">Remove.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#RemoveAssoc``2">RemoveAssoc.[T, TSecond]</a></li><li><a href="../Nemerle.Collections/NList.htm#RemoveDuplicates``1">RemoveDuplicates.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Repeat``1">Repeat.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Rev``1">Rev.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#RevAppend``1">RevAppend.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#RevFilter``1">RevFilter.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#RevMap``2">RevMap.[T, TOut]</a></li><li><a href="../Nemerle.Collections/NList.htm#RevMap2``3">RevMap2.[T, TSecond, TOut]</a></li><li><a href="../Nemerle.Collections/NList.htm#RevMapFiltered``2">RevMapFiltered.[T, TOut]</a></li><li><a href="../Nemerle.Collections/NList.htm#Singletons``1">Singletons.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#SizeSubsets``1">SizeSubsets.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Sort``1">Sort.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Split``2">Split.[T, TSecond]</a></li><li><a href="../Nemerle.Collections/NList.htm#SubsetsPartitions``1">SubsetsPartitions.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Tail``1">Tail.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#Tl``1">Tl.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#ToList``1">ToList.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#ToList``1">ToList.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#ToList``1">ToList.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#ToListRev``1">ToListRev.[T]</a></li><li><a href="../Nemerle.Collections/NList.htm#ToListRev``1">ToListRev.[T]</a></li>
			</ul>


	</div>



	<h3 class="section">Public static methods</h3>
<div id="Append``1" class="method">
		<h4><strong>Append.[T]</strong>(x : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, y : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Returns list made from appending list y at end of list x.
Original list are not modified.
Works in time and memory O(length(x)). </p> 




    </div>
	</div><div id="AsList``1" class="method">
		<h4><strong>AsList.[T]</strong>(source : <span title="System.Collections.Generic.IList[T]">IList[T]</span>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="Assoc``2" class="method">
		<h4><strong>Assoc.[T, TSecond]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, key : <span title="Nemerle.Collections.T">T</span>) : <a href="../Nemerle.Core/option`1.htm">option[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="Combine``2" class="method">
		<h4><strong>Combine.[T, TSecond]</strong>(a : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, b : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="Compare``1" class="method">
		<h4><strong>Compare.[T]</strong>(l1 : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, l2 : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, cmp : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <span title="System.int">int</span></h4>
		<div class="content"><p>Compare two lists lexicographically over the order defined on
their elements with function [cmp].  Returns [-1] if [l1] is smaller,
[1] if [l2] is smaller, and [0] if they equal. </p> 




    </div>
	</div><div id="Compare``1" class="method">
		<h4><strong>Compare.[T]</strong>(l1 : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, l2 : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <span title="System.int">int</span></h4>
		<div class="content"><p>Compare two lists lexicographically over the order defined on
their elements.  Returns [-1] if [l1] is smaller, [1] if [l2]
is smaller, and [0] if they equal. </p> 




    </div>
	</div><div id="Concat``1" class="method">
		<h4><strong>Concat.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Makes list one level more flat, i.e. Concat([[1, 2], [3, 4]]) = [1, 2, 3, 4].
Does not work deeper, i.e. Concat([[[1, 2], [3]], [[4]]]) = [[1, 2], [3], [4]]. </p> 




    </div>
	</div><div id="ConcatRev``1" class="method">
		<h4><strong>ConcatRev.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Equivalent to Concat(Rev(l)) </p> 




    </div>
	</div><div id="Contains``1" class="method">
		<h4><strong>Contains.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, a : <span title="Nemerle.Collections.T">T</span>) : <span title="System.bool">bool</span></h4>
		<div class="content"><p>NList membership test, using the `Equals' method to compare objects. </p> <blockquote class="remarks">
  <p>This is an alias for the `Member' method. </p> 
</blockquote>




    </div>
	</div><div id="ContainsRef``1" class="method">
		<h4><strong>ContainsRef.[T]</strong>(Collection : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, Obj : <span title="Nemerle.Collections.T">T</span>) : <span title="System.bool">bool</span></h4>
		<div class="content"><p>NList membership test, using the reference equality. </p> <blockquote class="remarks">
  <p>Returns true if and only if list [Collection] contains object with reference
equal to [Obj] object </p> 
</blockquote>




    </div>
	</div><div id="Copy``1" class="method">
		<h4><strong>Copy.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="DivideLast``1" class="method">
		<h4><strong>DivideLast.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Builtins/Tuple`2.htm">Tuple['p0, 'p1]</a></h4>
		<div class="content"><p>Returns a list without its last element and the list's last element </p> 




    </div>
	</div><div id="Equals``1" class="method">
		<h4><strong>Equals.[T]</strong>(x : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, y : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <span title="System.bool">bool</span></h4>
		<div class="content"><p>Tests equality of two lists.  Uses Equal method of
objects to test wether they are the same. </p> 




    </div>
	</div><div id="Equals``2" class="method">
		<h4><strong>Equals.[T1, TSecond]</strong>(lst1 : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, lst2 : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, compare : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <span title="System.bool">bool</span></h4>
		<div class="content">




    </div>
	</div><div id="Exists``1" class="method">
		<h4><strong>Exists.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, f : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <span title="System.bool">bool</span></h4>
		<div class="content"><p>Returns 'true' if at least one of the 'l' list's elements
satisfies the condition 'f'. </p> <blockquote class="remarks">
  <p>Example of use: </p> <p>NList.Exists (["a", "b", "abc", "d", "e"], fun (x) { x.Length > 2 }) </p> <p>evaluates to 'true' as there is one string of length 3 on the list. </p> 
</blockquote>




    </div>
	</div><div id="Exists2``2" class="method">
		<h4><strong>Exists2.[T, TSecond]</strong>(a : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, b : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, f : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <span title="System.bool">bool</span></h4>
		<div class="content">




    </div>
	</div><div id="Filter``1" class="method">
		<h4><strong>Filter.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, f : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Removes elements for which predicate is false </p> 




    </div>
	</div><div id="FilteredLength``1" class="method">
		<h4><strong>FilteredLength.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, f : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <span title="System.int">int</span></h4>
		<div class="content"><p>Returns the number of elements for which a predicate is true. </p> 




    </div>
	</div><div id="Find``1" class="method">
		<h4><strong>Find.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, pred : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/option`1.htm">option[T]</a></h4>
		<div class="content"><p>Finds the first elements for which a predicate is true. </p> 




    </div>
	</div><div id="FindAll``1" class="method">
		<h4><strong>FindAll.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, f : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>This is an alias for ``Filter'' </p> 




    </div>
	</div><div id="Flatten``1" class="method">
		<h4><strong>Flatten.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Alias for Concat(l). </p> 




    </div>
	</div><div id="FoldLeft``2" class="method">
		<h4><strong>FoldLeft.[T, TOut]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, acc : <span title="Nemerle.Collections.TOut">TOut</span>, f : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <span title="Nemerle.Collections.TOut">TOut</span></h4>
		<div class="content">




    </div>
	</div><div id="FoldLeft2``3" class="method">
		<h4><strong>FoldLeft2.[TFirst, TSecond, TOut]</strong>(a : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, b : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, acc : <span title="Nemerle.Collections.TOut">TOut</span>, f : <a href="../Nemerle.Builtins/Function`4.htm">Function['p1, 'p2, 'p3, 'r]</a>) : <span title="Nemerle.Collections.TOut">TOut</span></h4>
		<div class="content">




    </div>
	</div><div id="FoldRight``2" class="method">
		<h4><strong>FoldRight.[T, TOut]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, acc : <span title="Nemerle.Collections.TOut">TOut</span>, f : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <span title="Nemerle.Collections.TOut">TOut</span></h4>
		<div class="content">




    </div>
	</div><div id="FoldRight2``3" class="method">
		<h4><strong>FoldRight2.[TFirst, TSecond, TOut]</strong>(a : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, b : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, c : <span title="Nemerle.Collections.TOut">TOut</span>, f : <a href="../Nemerle.Builtins/Function`4.htm">Function['p1, 'p2, 'p3, 'r]</a>) : <span title="Nemerle.Collections.TOut">TOut</span></h4>
		<div class="content">




    </div>
	</div><div id="ForAll``1" class="method">
		<h4><strong>ForAll.[T]</strong>(lst : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, predicate : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <span title="System.bool">bool</span></h4>
		<div class="content"><p>Returns 'true' if all of the 'l' list's elements satisfy
the condition 'f'. </p> <blockquote class="remarks">
  <p>Example of use: </p> <p>NList.ForAll ([2, 4, 6, 8], fun (x) { x % 2 == 0 }) </p> <p>evaluates to 'true' as all the list's elements are even. </p> 
</blockquote>




    </div>
	</div><div id="ForAll2``2" class="method">
		<h4><strong>ForAll2.[T, TSecond]</strong>(a : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, b : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, f : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <span title="System.bool">bool</span></h4>
		<div class="content">




    </div>
	</div><div id="FromArray``1" class="method">
		<h4><strong>FromArray.[T]</strong>(x : <span title="Nemerle.Collections.T[]">T[]</span>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="Group``1" class="method">
		<h4><strong>Group.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, cmp : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Groups equal element into lists </p> 




    </div>
	</div><div id="Hd``1" class="method">
		<h4><strong>Hd.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <span title="Nemerle.Collections.T">T</span></h4>
		<div class="content"><p>Alias for l.Head. </p> 




    </div>
	</div><div id="Head``1" class="method">
		<h4><strong>Head.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <span title="Nemerle.Collections.T">T</span></h4>
		<div class="content"><p>Returns head (first element) of list.
Given empty list throws System.ArgumentException. </p> 




    </div>
	</div><div id="IsEmpty``1" class="method">
		<h4><strong>IsEmpty.[T]</strong>(lst : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <span title="System.bool">bool</span></h4>
		<div class="content"><p>Returns true if the given list is empty of null. </p> 




    </div>
	</div><div id="Iter``1" class="method">
		<h4><strong>Iter.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, f : <a href="../Nemerle.Builtins/FunctionVoid`1.htm">FunctionVoid['p1]</a>) : <span title="System.void">void</span></h4>
		<div class="content">




    </div>
	</div><div id="Iter2``2" class="method">
		<h4><strong>Iter2.[T, TOut]</strong>(a : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, b : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, f : <a href="../Nemerle.Builtins/FunctionVoid`2.htm">FunctionVoid['p1, 'p2]</a>) : <span title="System.void">void</span></h4>
		<div class="content">




    </div>
	</div><div id="Last``1" class="method">
		<h4><strong>Last.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <span title="Nemerle.Collections.T">T</span></h4>
		<div class="content"><p>Returns last element of list.
Given empty list throws InvalidArgument exception.
Works in time O(n) and memory O(1). </p> 




    </div>
	</div><div id="Length``1" class="method">
		<h4><strong>Length.[T]</strong>(x : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <span title="System.int">int</span></h4>
		<div class="content"><p>Returns length of given list. Time O(n), Mem O(1). </p> 




    </div>
	</div><div id="Map``2" class="method">
		<h4><strong>Map.[T, TOut]</strong>(lst : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, convert : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="Map2``3" class="method">
		<h4><strong>Map2.[T, TSecond, TOut]</strong>(x : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, y : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, f : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="MapFiltered``2" class="method">
		<h4><strong>MapFiltered.[T, TOut]</strong>(lst : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, predicate : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>, convert : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="MapFromArray``2" class="method">
		<h4><strong>MapFromArray.[T, TOut]</strong>(x : <span title="Nemerle.Collections.T[]">T[]</span>, f : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="MemAssoc``2" class="method">
		<h4><strong>MemAssoc.[T, TSecond]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, key : <span title="Nemerle.Collections.T">T</span>) : <span title="System.bool">bool</span></h4>
		<div class="content">




    </div>
	</div><div id="Member``1" class="method">
		<h4><strong>Member.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, a : <span title="Nemerle.Collections.T">T</span>) : <span title="System.bool">bool</span></h4>
		<div class="content"><p>NList membership test, using the `Equals' method to compare objects. </p> 




    </div>
	</div><div id="Nth``1" class="method">
		<h4><strong>Nth.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, n : <span title="System.int">int</span>) : <span title="Nemerle.Collections.T">T</span></h4>
		<div class="content"><p>Returns n-th element of list, where 0-th is head.
Throws InvalidArgument exception when given too short list.
Works in time O(n) and memory O(1). </p> 




    </div>
	</div><div id="Partition``1" class="method">
		<h4><strong>Partition.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, pred : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Builtins/Tuple`2.htm">Tuple['p0, 'p1]</a></h4>
		<div class="content"><p>Partitions a list into two sublists according to a predicate. </p> 




    </div>
	</div><div id="Product``1" class="method">
		<h4><strong>Product.[T]</strong>(list : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Returns a product of lists stored in list [list].  Elements of
result are lists of the same length = NList.Length (list). </p> <blockquote class="remarks">
  <p>E.g.:
Product ([[1, 2], [3, 4, 5]]) =
[[1, 3],
[1, 4],
[1, 5],
[2, 3],
[2, 4],
[2, 5]] </p> <p>Product ([[1, 2], [3, 4, 5], []]) = [] </p> 
</blockquote>




    </div>
	</div><div id="Range" class="method">
		<h4><strong>Range</strong>(b : <span title="System.Char">Char</span>, e : <span title="System.Char">Char</span>, step : <span title="System.int">int</span>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Return a list of characters, which values are incremented by [step],
beginning with [beg], up/down to [end], excluding [end] itself. </p> 




    </div>
	</div><div id="Range" class="method">
		<h4><strong>Range</strong>(end : <span title="System.int">int</span>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Return a list of integers from 0 to [end], excluding [end]. </p> 




    </div>
	</div><div id="Range" class="method">
		<h4><strong>Range</strong>(beg : <span title="System.int">int</span>, end : <span title="System.int">int</span>, step : <span title="System.int">int</span>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Return a list of values incremented by [step], beginning
with [beg], up/down to [end], excluding [end] itself. </p> 




    </div>
	</div><div id="Range" class="method">
		<h4><strong>Range</strong>(end : <span title="System.Char">Char</span>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Return a list of characters from 'a' to [end], excluding [end]. </p> 




    </div>
	</div><div id="Remove``1" class="method">
		<h4><strong>Remove.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, x : <span title="Nemerle.Collections.T">T</span>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Returns list l without elements equal to x. </p> 




    </div>
	</div><div id="RemoveAssoc``2" class="method">
		<h4><strong>RemoveAssoc.[T, TSecond]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, key : <span title="Nemerle.Collections.T">T</span>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="RemoveDuplicates``1" class="method">
		<h4><strong>RemoveDuplicates.[T]</strong>(lst : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Returns [l] with duplicates removed with respect to Equals method
It is assumed that equal elements of [l] are next to each other,
or that the list is sorted. </p> <blockquote class="remarks">
  <p>Example: </p> <p>def result = RemoveDuplicates ([1, 2, 2, 3, 4, 4]);
// result = [1, 2, 3, 4] </p> 
</blockquote>




    </div>
	</div><div id="Repeat``1" class="method">
		<h4><strong>Repeat.[T]</strong>(elem : <span title="Nemerle.Collections.T">T</span>, count : <span title="System.int">int</span>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Return list consisting of [count] references to [elem]. </p> 




    </div>
	</div><div id="Rev``1" class="method">
		<h4><strong>Rev.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Returns reversed list, i.e. Rev([1, 2, 3]) = [3, 2, 1].
Works in time and memory O(n). </p> 




    </div>
	</div><div id="RevAppend``1" class="method">
		<h4><strong>RevAppend.[T]</strong>(x : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, y : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Equivalent to Append(Rev(x),y). </p> 




    </div>
	</div><div id="RevFilter``1" class="method">
		<h4><strong>RevFilter.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, f : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Removes elements for which predicate is false.
The resulting list is reversed (operation is faster this way). </p> 




    </div>
	</div><div id="RevMap``2" class="method">
		<h4><strong>RevMap.[T, TOut]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, convert : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="RevMap2``3" class="method">
		<h4><strong>RevMap2.[T, TSecond, TOut]</strong>(x : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, y : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, f : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="RevMapFiltered``2" class="method">
		<h4><strong>RevMapFiltered.[T, TOut]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, predicate : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>, convert : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="Singletons``1" class="method">
		<h4><strong>Singletons.[T]</strong>(list : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="SizeSubsets``1" class="method">
		<h4><strong>SizeSubsets.[T]</strong>(list : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, n : <span title="System.int">int</span>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Return list of all possible [n]-element subsets of set [list]. </p> 




    </div>
	</div><div id="Sort``1" class="method">
		<h4><strong>Sort.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, cmp : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="Split``2" class="method">
		<h4><strong>Split.[T, TSecond]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Builtins/Tuple`2.htm">Tuple['p0, 'p1]</a></h4>
		<div class="content">




    </div>
	</div><div id="SubsetsPartitions``1" class="method">
		<h4><strong>SubsetsPartitions.[T]</strong>(set : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, count : <span title="System.int">int</span>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Return a list of all possible partitions of [set] into [count] subsets. </p> 




    </div>
	</div><div id="Tail``1" class="method">
		<h4><strong>Tail.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Returns tail (all elements except first one) of list. </p> 




    </div>
	</div><div id="Tl``1" class="method">
		<h4><strong>Tl.[T]</strong>(l : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Alias for Tail(l). </p> 




    </div>
	</div><div id="ToList``1" class="method">
		<h4><strong>ToList.[T]</strong>(seq : <span title="System.Collections.Generic.IEnumerable[T]">IEnumerable[T]</span>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="ToList``1" class="method">
		<h4><strong>ToList.[T]</strong>(seq : <span title="System.Collections.Generic.IEnumerable[T]">IEnumerable[T]</span>, filter : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="ToList``1" class="method">
		<h4><strong>ToList.[T]</strong>(source : <span title="System.Collections.Generic.IList[T]">IList[T]</span>, filter : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="ToListRev``1" class="method">
		<h4><strong>ToListRev.[T]</strong>(seq : <span title="System.Collections.Generic.IEnumerable[T]">IEnumerable[T]</span>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="ToListRev``1" class="method">
		<h4><strong>ToListRev.[T]</strong>(seq : <span title="System.Collections.Generic.IEnumerable[T]">IEnumerable[T]</span>, filter : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div>

<div id="footer">
  <p>Based on v1.0.0.9832 of </p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>