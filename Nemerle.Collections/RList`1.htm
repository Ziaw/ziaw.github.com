<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>RList['a] -  Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul><li>
          <a href="../Nemerle/index.htm">Nemerle</a>
      </li><li>
          <a href="../Nemerle.Builtins/index.htm">Nemerle.Builtins</a>
      </li><li>
          <a href="../Nemerle.Collections/index.htm" class="current">Nemerle.Collections</a>
      </li><li>
          <a href="../Nemerle.Compiler/index.htm">Nemerle.Compiler</a>
      </li><li>
          <a href="../Nemerle.Concurrency/index.htm">Nemerle.Concurrency</a>
      </li><li>
          <a href="../Nemerle.Core/index.htm">Nemerle.Core</a>
      </li><li>
          <a href="../Nemerle.Diagnostics/index.htm">Nemerle.Diagnostics</a>
      </li><li>
          <a href="../Nemerle.Extensions/index.htm">Nemerle.Extensions</a>
      </li><li>
          <a href="../Nemerle.Hacks/index.htm">Nemerle.Hacks</a>
      </li><li>
          <a href="../Nemerle.Internal/index.htm">Nemerle.Internal</a>
      </li><li>
          <a href="../Nemerle.IO/index.htm">Nemerle.IO</a>
      </li><li>
          <a href="../Nemerle.Late/index.htm">Nemerle.Late</a>
      </li><li>
          <a href="../Nemerle.Utility/index.htm">Nemerle.Utility</a>
      </li><li>
          <a href="../StringTemplate/index.htm">StringTemplate</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in Nemerle.Collections</h2>
	<div class="scroll">
		<ul><li>
            <a href="../Nemerle.Collections/EmptyCollection.htm">EmptyCollection</a>
        </li><li>
            <a href="../Nemerle.Collections/EmptyHeap.htm">EmptyHeap</a>
        </li><li>
            <a href="../Nemerle.Collections/Hashtable`2.htm">Hashtable[TKey, TValue]</a>
        </li><li>
            <a href="../Nemerle.Collections/Heap`1.htm">Heap[T]</a>
        </li><li>
            <a href="../Nemerle.Collections/ICollection`1.htm">ICollection['a]</a>
        </li><li>
            <a href="../Nemerle.Collections/ICovariantEnumerable`1.htm">ICovariantEnumerable[T]</a>
        </li><li>
            <a href="../Nemerle.Collections/ICovariantEnumerator`1.htm">ICovariantEnumerator[T]</a>
        </li><li>
            <a href="../Nemerle.Collections/ICovariantList`1.htm">ICovariantList[T]</a>
        </li><li>
            <a href="../Nemerle.Collections/LinkedList`1.htm">LinkedList['a]</a>
        </li><li>
            <a href="../Nemerle.Collections/ListEnumerator`1.htm">ListEnumerator[T]</a>
        </li><li>
            <a href="../Nemerle.Collections/Map`2.htm">Map[TKey, TValue]</a>
        </li><li>
            <a href="../Nemerle.Collections/NCollectionsExtensions.htm">NCollectionsExtensions</a>
        </li><li>
            <a href="../Nemerle.Collections/Nil.htm">Nil</a>
        </li><li>
            <a href="../Nemerle.Collections/NList.htm">NList</a>
        </li><li>
            <a href="../Nemerle.Collections/One.htm">One</a>
        </li><li>
            <a href="../Nemerle.Collections/Pair`1.htm">Pair['a]</a>
        </li><li>
            <a href="../Nemerle.Collections/Queue`1.htm">Queue['a]</a>
        </li><li>
            <a href="../Nemerle.Collections/RList`1.htm" class="current">RList['a]</a>
        </li><li>
            <a href="../Nemerle.Collections/Seq`1.htm">Seq[T]</a>
        </li><li>
            <a href="../Nemerle.Collections/Set`1.htm">Set[T]</a>
        </li><li>
            <a href="../Nemerle.Collections/Stack`1.htm">Stack['a]</a>
        </li><li>
            <a href="../Nemerle.Collections/Zero.htm">Zero</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> RList['a]</p>
		<p><strong>Namespace</strong> Nemerle.Collections</p><p><strong>Interfaces</strong> <span title="System.Collections.Generic.IEnumerable['a]">IEnumerable['a]</span>, <span title="System.IEquatable[RList['a]]">IEquatable[RList['a]]</span></p>
	</div>
    <div class="sub-header">
			<div id="summary"><p>RList is short for Random Access List. It is a purely functional
data-structure. This implementation is based on the SML sources
found in Chris Okasaki's "Purely Functional Data Structures"
(Cambridge University Press, 1999). </p> 
			</div>


			<h3 class="section">Methods</h3>
			<ul><li><a href="../Nemerle.Collections/RList`1.htm#Append">Append</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Append">Append</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Cons">Cons</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Cons">Cons</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Contains">Contains</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Equals">Equals</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Equals">Equals</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Exists">Exists</a></li><li><a href="../Nemerle.Collections/RList`1.htm#FoldLeft``1">FoldLeft.['b]</a></li><li><a href="../Nemerle.Collections/RList`1.htm#FoldRight``1">FoldRight.['b]</a></li><li><a href="../Nemerle.Collections/RList`1.htm#FromList">FromList</a></li><li><a href="../Nemerle.Collections/RList`1.htm#FromList">FromList</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Hd">Hd</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Hd">Hd</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Head">Head</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Head">Head</a></li><li><a href="../Nemerle.Collections/RList`1.htm#IsEmpty">IsEmpty</a></li><li><a href="../Nemerle.Collections/RList`1.htm#IsEmpty">IsEmpty</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Iter">Iter</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Last">Last</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Last">Last</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Map``1">Map.['b]</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Member">Member</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Member">Member</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Nth">Nth</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Rev">Rev</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Tail">Tail</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Tail">Tail</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Tl">Tl</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Tl">Tl</a></li><li><a href="../Nemerle.Collections/RList`1.htm#ToList">ToList</a></li><li><a href="../Nemerle.Collections/RList`1.htm#ToString">ToString</a></li><li><a href="../Nemerle.Collections/RList`1.htm#UnCons">UnCons</a></li><li><a href="../Nemerle.Collections/RList`1.htm#UnCons">UnCons</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Update">Update</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Update">Update</a></li>
			</ul>

			<h3 class="section">Properties</h3>
			<ul><li><a href="../Nemerle.Collections/RList`1.htm#Item">Item</a></li><li><a href="../Nemerle.Collections/RList`1.htm#Length">Length</a></li>
			</ul>

			<h3 class="section">Fields</h3>
			<ul><li><a href="../Nemerle.Collections/RList`1.htm#Empty">Empty</a></li>
			</ul>
	</div>


	<h3 class="section">Public instance methods</h3>
<div id="Append" class="method">
		<h4><strong>Append</strong>(ys : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>) : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></h4>
		<div class="content"><p>Returns an a new RList composed by appending [ys]
at the end of [this].
Time complexity: roughly O (|this| * log (|this| + |ys|)). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>ys : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The RList, which elements come second in the resulting RList. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6>
        <p><p>An RListcomposed by appending [ys] at the end of [this]. </p> </p>
      </div>

    </div>
	</div><div id="Cons" class="method">
		<h4><strong>Cons</strong>(x : <span title="Nemerle.Collections.'a">'a</span>) : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></h4>
		<div class="content">




    </div>
	</div><div id="Equals" class="method">
		<h4><strong>Equals</strong>(ys : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>) : <span title="System.bool">bool</span></h4>
		<div class="content"><p>Checks, whether [this] and [ys] are equal RLists, by cheking if their
respective elements are equal.
Time complexity: O (min (|this|, |ys|)). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>ys : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The RList [this] is compared to. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p><p>true if [this] and [ys] are equal,
false otherwise. </p> </p>
      </div>

    </div>
	</div><div id="Hd" class="method">
		<h4><strong>Hd</strong>() : <span title="Nemerle.Collections.'a">'a</span></h4>
		<div class="content"><p>Returns the head of the RList [this].
Time complexity: O (log (|this|)).
An alias for Head. </p> 


<div class="return">
        <h5>Return</h5>
        <h6><code><span title="Nemerle.Collections.'a">'a</span></code></h6>
        <p><p>The head of [this]. </p> </p>
      </div>

    </div>
	</div><div id="Head" class="method">
		<h4><strong>Head</strong>() : <span title="Nemerle.Collections.'a">'a</span></h4>
		<div class="content"><p>Returns the head of the RList [this].
Time complexity: O (log (|this|)). </p> 


<div class="return">
        <h5>Return</h5>
        <h6><code><span title="Nemerle.Collections.'a">'a</span></code></h6>
        <p><p>The head of [this]. </p> </p>
      </div>

    </div>
	</div><div id="IsEmpty" class="method">
		<h4><strong>IsEmpty</strong>() : <span title="System.bool">bool</span></h4>
		<div class="content"><p>Checks, whether [this] is an empty RList.
Time complexity: O (1). </p> 


<div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p><p>true if [this] is an empty RList,
false otherwise. </p> </p>
      </div>

    </div>
	</div><div id="Last" class="method">
		<h4><strong>Last</strong>() : <span title="Nemerle.Collections.'a">'a</span></h4>
		<div class="content"><p>Returns the last element of the RList [this].
Time complexity: O (log (|this|)). </p> 


<div class="return">
        <h5>Return</h5>
        <h6><code><span title="Nemerle.Collections.'a">'a</span></code></h6>
        <p><p>The last element of [this]. </p> </p>
      </div>

    </div>
	</div><div id="Member" class="method">
		<h4><strong>Member</strong>(elem : <span title="Nemerle.Collections.'a">'a</span>) : <span title="System.bool">bool</span></h4>
		<div class="content">




    </div>
	</div><div id="Tail" class="method">
		<h4><strong>Tail</strong>() : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></h4>
		<div class="content"><p>Returns the tail of the RList [this].
Time complexity: O (log (|this|)). </p> 


<div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6>
        <p><p>The tail of [this]. </p> </p>
      </div>

    </div>
	</div><div id="Tl" class="method">
		<h4><strong>Tl</strong>() : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></h4>
		<div class="content"><p>Returns the tail of the RList [this].
Time complexity: O (log (|this|)).
An alias fot Tail. </p> 


<div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6>
        <p><p>The tail of [this]. </p> </p>
      </div>

    </div>
	</div><div id="UnCons" class="method">
		<h4><strong>UnCons</strong>() : <a href="../Nemerle.Builtins/Tuple`2.htm">Tuple['p0, 'p1]</a></h4>
		<div class="content"><p>Separates and returns the head and tail of the RList [this].
Time complexity: O (log (|this|)). </p> 


<div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Nemerle.Builtins/Tuple`2.htm">Tuple['p0, 'p1]</a></code></h6>
        <p><p>The head and tail of [this]. </p> </p>
      </div>

    </div>
	</div><div id="Update" class="method">
		<h4><strong>Update</strong>(i : <span title="System.int">int</span>, y : <span title="Nemerle.Collections.'a">'a</span>) : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></h4>
		<div class="content">




    </div>
	</div>

	<h3 class="section">Public static methods</h3>
<div id="Append" class="method">
		<h4><strong>Append</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>, ys : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>) : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></h4>
		<div class="content"><p>Returns an a new RList composed by appending [ys]
at the end of [xs].
Time complexity: roughly O (|xs| * log (|ys| + |xs|)). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The RList, which elements come first in the resulting RList. </p> </p>
          <h6>ys : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The RList, which elements come second in the resulting RList. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6>
        <p><p>An RList composed by appending [ys] at the end of [xs]. </p> </p>
      </div>

    </div>
	</div><div id="Cons" class="method">
		<h4><strong>Cons</strong>(x : <span title="Nemerle.Collections.'a">'a</span>, xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>) : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></h4>
		<div class="content">




    </div>
	</div><div id="Contains" class="method">
		<h4><strong>Contains</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>, elem : <span title="Nemerle.Collections.'a">'a</span>) : <span title="System.bool">bool</span></h4>
		<div class="content">




    </div>
	</div><div id="Equals" class="method">
		<h4><strong>Equals</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>, ys : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>) : <span title="System.bool">bool</span></h4>
		<div class="content"><p>Checks, whether two RLists are equal, by cheking if their
respective elements are equal.
Time complexity: O (min (|xs|, |ys|)). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The first compared RList. </p> </p>
          <h6>ys : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The second compared RList. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p><p>true if [xs] and [ys] are equal,
false otherwise. </p> </p>
      </div>

    </div>
	</div><div id="Exists" class="method">
		<h4><strong>Exists</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>, f : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <span title="System.bool">bool</span></h4>
		<div class="content"><p>Returns true if there exists an element on [xs], that
satisfies the predicate [f] (that is f (elem) == true).
Time complexity: O (|xs|). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The RList containing the tested elements. </p> </p>
          <h6>f : <code><a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a></code></h6><p class="comments"><p>The predicate used during the tests. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p><p>Returns true if for any element on the RList [xs],
applying [f] to that element returns true, otherwise
returns false. </p> </p>
      </div>

    </div>
	</div><div id="FoldLeft``1" class="method">
		<h4><strong>FoldLeft.['b]</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>, acc : <span title="Nemerle.Collections.'b">'b</span>, f : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <span title="Nemerle.Collections.'b">'b</span></h4>
		<div class="content"><p>Iterates over the RList [xs] from left to right, composing the return
value, by applying [f], to each of [xs]'s elements and the current [acc].
Time complexity: O (|xs|). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The RList over which FoldLeft is going to iterate. </p> </p>
          <h6>acc : <code><span title="Nemerle.Collections.'b">'b</span></code></h6><p class="comments"><p>The accumulator being updated on each level of recursion, to
finally become the return value of FoldLeft.
The supplied value will be used by [f] in the first step. </p> </p>
          <h6>f : <code><a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a></code></h6><p class="comments"><p>The function being applied to ([RList-elem], [acc]) in each step. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><span title="Nemerle.Collections.'b">'b</span></code></h6>
        <p><p>Acc in it's final state at the last step of recursion </p> </p>
      </div>

    </div>
	</div><div id="FoldRight``1" class="method">
		<h4><strong>FoldRight.['b]</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>, acc : <span title="Nemerle.Collections.'b">'b</span>, f : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <span title="Nemerle.Collections.'b">'b</span></h4>
		<div class="content"><p>Iterates over the RList [xs] from right to left, composing the return
value, by applying [f], to each of [xs]'s elements and the current [acc].
Time complexity: O (|xs|). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The RList over which FoldRight is going to iterate. </p> </p>
          <h6>acc : <code><span title="Nemerle.Collections.'b">'b</span></code></h6><p class="comments"><p>The accumulator updated on each level of recursion and used by [f].
The supplied value will be used by [f] in the last step. </p> </p>
          <h6>f : <code><a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a></code></h6><p class="comments"><p>The function being applied to ([RList-elem], [acc]) in each step. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><span title="Nemerle.Collections.'b">'b</span></code></h6>
        <p><p>The result of applying [f] to each element of [xs] and the current [acc]. </p> </p>
      </div>

    </div>
	</div><div id="FromList" class="method">
		<h4><strong>FromList</strong>(xs : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, i : <span title="System.int">int</span>) : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></h4>
		<div class="content"><p>Returns an RList composed of the elements of list [xs], of
length [i].
Time complexity: O (|xs|). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Core/list`1.htm">list[T]</a></code></h6><p class="comments"><p>The list used when composing the return value. </p> </p>
          <h6>i : <code><span title="System.int">int</span></code></h6><p class="comments"><p>The length of [xs] and therefore of the return value as well. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6>
        <p><p>An RList composed of the elements of [xs]. </p> </p>
      </div>

    </div>
	</div><div id="FromList" class="method">
		<h4><strong>FromList</strong>(xs : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></h4>
		<div class="content"><p>Returns an RList composed of the elements of list [xs].
Use RList (xs, |xs|) if |xs| is known.
Time complexity: O (|xs|). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Core/list`1.htm">list[T]</a></code></h6><p class="comments"><p>The list used when composing the return value. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6>
        <p><p>An RList composed of the elements of [xs]. </p> </p>
      </div>

    </div>
	</div><div id="Hd" class="method">
		<h4><strong>Hd</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>) : <span title="Nemerle.Collections.'a">'a</span></h4>
		<div class="content"><p>Returns the head of the RList [xs].
Time complexity: O (log (|xs|)).
An alias for Head. </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The RList, which head is going to be returned. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><span title="Nemerle.Collections.'a">'a</span></code></h6>
        <p><p>The head of [xs]. </p> </p>
      </div>

    </div>
	</div><div id="Head" class="method">
		<h4><strong>Head</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>) : <span title="Nemerle.Collections.'a">'a</span></h4>
		<div class="content"><p>Returns the head of the RList [xs].
Time complexity: O (log (|xs|)). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The RList, which head is going to be returned. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><span title="Nemerle.Collections.'a">'a</span></code></h6>
        <p><p>The head of [xs]. </p> </p>
      </div>

    </div>
	</div><div id="IsEmpty" class="method">
		<h4><strong>IsEmpty</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>) : <span title="System.bool">bool</span></h4>
		<div class="content"><p>Checks, whether the RList [xs] is empty.
Time complexity: O (1). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The list to check for emptiness. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p><p>true if the [xs] is empty,
false otherwise. </p> </p>
      </div>

    </div>
	</div><div id="Iter" class="method">
		<h4><strong>Iter</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>, f : <a href="../Nemerle.Builtins/FunctionVoid`1.htm">FunctionVoid['p1]</a>) : <span title="System.void">void</span></h4>
		<div class="content"><p>Iterates over [xs] applying [f] to each of its elements.
Time complexity: O (|xs|). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The RList on which [f] is iterated. </p> </p>
          <h6>f : <code><a href="../Nemerle.Builtins/FunctionVoid`1.htm">FunctionVoid['p1]</a></code></h6><p class="comments"><p>The function being applied to every [xs] element during
iteration. </p> </p>
      </div>


    </div>
	</div><div id="Last" class="method">
		<h4><strong>Last</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>) : <span title="Nemerle.Collections.'a">'a</span></h4>
		<div class="content"><p>Returns the last element of the RList [xs].
Time complexity: O (log (|xs|)). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The RList, which last element is going to be returned. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><span title="Nemerle.Collections.'a">'a</span></code></h6>
        <p><p>The last element of [xs]. </p> </p>
      </div>

    </div>
	</div><div id="Map``1" class="method">
		<h4><strong>Map.['b]</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>, f : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></h4>
		<div class="content"><p>Returns a new RList composed from [xs] by applying [f]
to every element on that RList.
Time complexity: O (|xs|). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The source RList from which the return RList is composed by
applying [f] to each of its elements. </p> </p>
          <h6>f : <code><a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a></code></h6><p class="comments"><p>The function being applied to every [xs] element. The values
it returns will make up the new RList returned by Map. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6>
        <p><p>A new RList composed from [xs] by applying [f] to every
element on that RList. </p> </p>
      </div>

    </div>
	</div><div id="Member" class="method">
		<h4><strong>Member</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>, elem : <span title="Nemerle.Collections.'a">'a</span>) : <span title="System.bool">bool</span></h4>
		<div class="content">




    </div>
	</div><div id="Nth" class="method">
		<h4><strong>Nth</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>, i : <span title="System.int">int</span>) : <span title="Nemerle.Collections.'a">'a</span></h4>
		<div class="content"><p>Returns the [i]-th element of the RList [xs].
Time complexity: O (log (|xs|)). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The RList, which [i]-th element is going to be returned. </p> </p>
          <h6>i : <code><span title="System.int">int</span></code></h6><p class="comments"><p>The index under which the return element is located in [xs]. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><span title="Nemerle.Collections.'a">'a</span></code></h6>
        <p><p>The [i]-th element of [xs]. </p> </p>
      </div>

    </div>
	</div><div id="Rev" class="method">
		<h4><strong>Rev</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>) : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></h4>
		<div class="content"><p>Returns an RList composed by reversing [xs].
Time complexity: O (|xs| * log (|xs|)). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The RList used when composing the return value. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6>
        <p><p>An RList composed by reversing [xs]. </p> </p>
      </div>

    </div>
	</div><div id="Tail" class="method">
		<h4><strong>Tail</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>) : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></h4>
		<div class="content"><p>Returns the tail of the RList [xs].
Time complexity: O (log (|xs|)). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The RList, which tail is going to be returned. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6>
        <p><p>The tail of [xs]. </p> </p>
      </div>

    </div>
	</div><div id="Tl" class="method">
		<h4><strong>Tl</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>) : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></h4>
		<div class="content"><p>Returns the tail of the RList [xs].
Time complexity: O (log (|xs|)).
An alias for Tail. </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The RList, which tail is going to be returned. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6>
        <p><p>The tail of [xs]. </p> </p>
      </div>

    </div>
	</div><div id="ToList" class="method">
		<h4><strong>ToList</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Returns a list of elements of the RList [xs] in the same order.
Time complexity: O (|xs|). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The RList used when composing the return value. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Nemerle.Core/list`1.htm">list[T]</a></code></h6>
        <p><p>A list of elements of the RList [xs] in the same order. </p> </p>
      </div>

    </div>
	</div><div id="ToString" class="method">
		<h4><strong>ToString</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>) : <span title="System.string">string</span></h4>
		<div class="content"><p>Returns a string representation of the RList [xs].
Time complexity: O (|xs|). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The RList used when composing the return value. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.string">string</span></code></h6>
        <p><p>A string representation of the RList [xs]. </p> </p>
      </div>

    </div>
	</div><div id="UnCons" class="method">
		<h4><strong>UnCons</strong>(xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>) : <a href="../Nemerle.Builtins/Tuple`2.htm">Tuple['p0, 'p1]</a></h4>
		<div class="content"><p>Separates and returns the head and tail of the RList [xs].
Time complexity: O (log (|xs|)). </p> 

<div class="parameters">
        <h5>Parameters</h5>

          <h6>xs : <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code></h6><p class="comments"><p>The RList, which tail is going to be returned along with the separated head. </p> </p>
      </div>
<div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Nemerle.Builtins/Tuple`2.htm">Tuple['p0, 'p1]</a></code></h6>
        <p><p>The head and tail of [xs]. </p> </p>
      </div>

    </div>
	</div><div id="Update" class="method">
		<h4><strong>Update</strong>(i : <span title="System.int">int</span>, y : <span title="Nemerle.Collections.'a">'a</span>, xs : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a>) : <a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></h4>
		<div class="content">




    </div>
	</div>

  <h3 class="section">Public properties</h3>
<div id="Item" class="method">
    <h4><strong>Item : <span title="Nemerle.Collections.'a">'a</span></strong> get;
    </h4>
    <div class="content">

    </div>
  </div><div id="Length" class="method">
    <h4><strong>Length : <span title="System.int">int</span></strong> get;
    </h4>
    <div class="content"><p>Returns the length of the RList [this].
Time complexity: O (log (|this|)). </p> 

    </div>
  </div>
  <h3 class="section">Public fields</h3>
<div id="Empty" class="method">
    <h4><strong>Empty</strong> : RList['a]</h4>
    <div class="content"><p>Returns an empty RList.
Time complexity: O (1). </p> 
      <table>
        <tr>
          <td>
            <code><a href="../Nemerle.Collections/RList`1.htm">RList['a]</a></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
<div id="footer">
  <p>Based on v1.0.0.9832 of </p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>