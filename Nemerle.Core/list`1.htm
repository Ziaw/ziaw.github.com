<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>list[T] -  Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul><li>
          <a href="../Nemerle/index.htm">Nemerle</a>
      </li><li>
          <a href="../Nemerle.Builtins/index.htm">Nemerle.Builtins</a>
      </li><li>
          <a href="../Nemerle.Collections/index.htm">Nemerle.Collections</a>
      </li><li>
          <a href="../Nemerle.Compiler/index.htm">Nemerle.Compiler</a>
      </li><li>
          <a href="../Nemerle.Concurrency/index.htm">Nemerle.Concurrency</a>
      </li><li>
          <a href="../Nemerle.Core/index.htm" class="current">Nemerle.Core</a>
      </li><li>
          <a href="../Nemerle.Diagnostics/index.htm">Nemerle.Diagnostics</a>
      </li><li>
          <a href="../Nemerle.Extensions/index.htm">Nemerle.Extensions</a>
      </li><li>
          <a href="../Nemerle.Hacks/index.htm">Nemerle.Hacks</a>
      </li><li>
          <a href="../Nemerle.Internal/index.htm">Nemerle.Internal</a>
      </li><li>
          <a href="../Nemerle.IO/index.htm">Nemerle.IO</a>
      </li><li>
          <a href="../Nemerle.Late/index.htm">Nemerle.Late</a>
      </li><li>
          <a href="../Nemerle.Utility/index.htm">Nemerle.Utility</a>
      </li><li>
          <a href="../StringTemplate/index.htm">StringTemplate</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in Nemerle.Core</h2>
	<div class="scroll">
		<ul><li>
            <a href="../Nemerle.Core/AssemblyFindException.htm">AssemblyFindException</a>
        </li><li>
            <a href="../Nemerle.Core/AssertionException.htm">AssertionException</a>
        </li><li>
            <a href="../Nemerle.Core/bool.htm">bool</a>
        </li><li>
            <a href="../Nemerle.Core/byte.htm">byte</a>
        </li><li>
            <a href="../Nemerle.Core/char.htm">char</a>
        </li><li>
            <a href="../Nemerle.Core/Cons.htm">Cons</a>
        </li><li>
            <a href="../Nemerle.Core/decimal.htm">decimal</a>
        </li><li>
            <a href="../Nemerle.Core/double.htm">double</a>
        </li><li>
            <a href="../Nemerle.Core/float.htm">float</a>
        </li><li>
            <a href="../Nemerle.Core/int.htm">int</a>
        </li><li>
            <a href="../Nemerle.Core/list`1.htm" class="current">list[T]</a>
        </li><li>
            <a href="../Nemerle.Core/long.htm">long</a>
        </li><li>
            <a href="../Nemerle.Core/MatchFailureException.htm">MatchFailureException</a>
        </li><li>
            <a href="../Nemerle.Core/Nil.htm">Nil</a>
        </li><li>
            <a href="../Nemerle.Core/None.htm">None</a>
        </li><li>
            <a href="../Nemerle.Core/NullMatchException.htm">NullMatchException</a>
        </li><li>
            <a href="../Nemerle.Core/object.htm">object</a>
        </li><li>
            <a href="../Nemerle.Core/Option.htm">Option</a>
        </li><li>
            <a href="../Nemerle.Core/option`1.htm">option[T]</a>
        </li><li>
            <a href="../Nemerle.Core/sbyte.htm">sbyte</a>
        </li><li>
            <a href="../Nemerle.Core/short.htm">short</a>
        </li><li>
            <a href="../Nemerle.Core/Some.htm">Some</a>
        </li><li>
            <a href="../Nemerle.Core/string.htm">string</a>
        </li><li>
            <a href="../Nemerle.Core/uint.htm">uint</a>
        </li><li>
            <a href="../Nemerle.Core/ulong.htm">ulong</a>
        </li><li>
            <a href="../Nemerle.Core/ushort.htm">ushort</a>
        </li><li>
            <a href="../Nemerle.Core/ValueOption`1.htm">ValueOption[T]</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> list[T]</p>
		<p><strong>Namespace</strong> Nemerle.Core</p><p><strong>Interfaces</strong> <span title="System.Collections.Generic.IEnumerable[T]">IEnumerable[T]</span>, <a href="../Nemerle.Collections/ICovariantList`1.htm">ICovariantList[T]</a>, <span title="System.IEquatable[list[T]]">IEquatable[list[T]]</span></p>
	</div>
    <div class="sub-header">
			<div id="summary"><p>The core datastructure allowing easy manipulating of small
and medium sized collections of elements. </p> <blockquote class="remarks">
  <p>It has a builtin syntax [] for empty list, x :: xs for creating list
from head element and tail. </p> 
</blockquote>
			</div>


			<h3 class="section">Methods</h3>
			<ul><li><a href="../Nemerle.Core/list`1.htm#Append">Append</a></li><li><a href="../Nemerle.Core/list`1.htm#ChopFirstN">ChopFirstN</a></li><li><a href="../Nemerle.Core/list`1.htm#CopyTo">CopyTo</a></li><li><a href="../Nemerle.Core/list`1.htm#CopyTo">CopyTo</a></li><li><a href="../Nemerle.Core/list`1.htm#DivideLast">DivideLast</a></li><li><a href="../Nemerle.Core/list`1.htm#Equals">Equals</a></li><li><a href="../Nemerle.Core/list`1.htm#Equals``1">Equals.[TSecond]</a></li><li><a href="../Nemerle.Core/list`1.htm#FilteredLength">FilteredLength</a></li><li><a href="../Nemerle.Core/list`1.htm#Find">Find</a></li><li><a href="../Nemerle.Core/list`1.htm#FindAll">FindAll</a></li><li><a href="../Nemerle.Core/list`1.htm#FindWithDefault">FindWithDefault</a></li><li><a href="../Nemerle.Core/list`1.htm#FirstN">FirstN</a></li><li><a href="../Nemerle.Core/list`1.htm#Flatten``1">Flatten.[TOut]</a></li><li><a href="../Nemerle.Core/list`1.htm#Flatten``1">Flatten.[TOut]</a></li><li><a href="../Nemerle.Core/list`1.htm#FoldLeft``1">FoldLeft.[TOut]</a></li><li><a href="../Nemerle.Core/list`1.htm#FoldRight``1">FoldRight.[TOut]</a></li><li><a href="../Nemerle.Core/list`1.htm#ForAll2``1">ForAll2.[TSecond]</a></li><li><a href="../Nemerle.Core/list`1.htm#GetElementType">GetElementType</a></li><li><a href="../Nemerle.Core/list`1.htm#Group">Group</a></li><li><a href="../Nemerle.Core/list`1.htm#IsOrdered``1">IsOrdered.[TSecond]</a></li><li><a href="../Nemerle.Core/list`1.htm#IsOrdered``1">IsOrdered.[TSecond]</a></li><li><a href="../Nemerle.Core/list`1.htm#IterI">IterI</a></li><li><a href="../Nemerle.Core/list`1.htm#LastN">LastN</a></li><li><a href="../Nemerle.Core/list`1.htm#MapFiltered``1">MapFiltered.[TOut]</a></li><li><a href="../Nemerle.Core/list`1.htm#MapToArray``1">MapToArray.[TOut]</a></li><li><a href="../Nemerle.Core/list`1.htm#Nth">Nth</a></li><li><a href="../Nemerle.Core/list`1.htm#RemoveDuplicates">RemoveDuplicates</a></li><li><a href="../Nemerle.Core/list`1.htm#Rev">Rev</a></li><li><a href="../Nemerle.Core/list`1.htm#RevAppend">RevAppend</a></li><li><a href="../Nemerle.Core/list`1.htm#RevFilter">RevFilter</a></li><li><a href="../Nemerle.Core/list`1.htm#RevFilterWhenNeeded">RevFilterWhenNeeded</a></li><li><a href="../Nemerle.Core/list`1.htm#RevMap``1">RevMap.[TOut]</a></li><li><a href="../Nemerle.Core/list`1.htm#Sort">Sort</a></li><li><a href="../Nemerle.Core/list`1.htm#ToArray">ToArray</a></li><li><a href="../Nemerle.Core/list`1.htm#Zip``1">Zip.[TSecond]</a></li>
			</ul>

			<h3 class="section">Properties</h3>
			<ul><li><a href="../Nemerle.Core/list`1.htm#CovariantTail">CovariantTail</a></li><li><a href="../Nemerle.Core/list`1.htm#Head">Head</a></li><li><a href="../Nemerle.Core/list`1.htm#IsEmpty">IsEmpty</a></li><li><a href="../Nemerle.Core/list`1.htm#Last">Last</a></li><li><a href="../Nemerle.Core/list`1.htm#Length">Length</a></li><li><a href="../Nemerle.Core/list`1.htm#Tail">Tail</a></li>
			</ul>

	</div>


	<h3 class="section">Public instance methods</h3>
<div id="Append" class="method">
		<h4><strong>Append</strong>(y : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Returns list made from appending list y at end of list x.
Original list are not modified.
Works in time and memory O(length(x)). </p> 




    </div>
	</div><div id="ChopFirstN" class="method">
		<h4><strong>ChopFirstN</strong>(n : <span title="System.int">int</span>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Return [this] without first [n] elements. Works in time O(n)
and constant memory. Throws ArgumentException when called on
too short list. </p> 




    </div>
	</div><div id="CopyTo" class="method">
		<h4><strong>CopyTo</strong>(dest : <span title="Nemerle.Core.T[]">T[]</span>) : <span title="System.void">void</span></h4>
		<div class="content">




    </div>
	</div><div id="CopyTo" class="method">
		<h4><strong>CopyTo</strong>(dest : <span title="Nemerle.Core.T[]">T[]</span>, len : <span title="System.int">int</span>) : <span title="System.void">void</span></h4>
		<div class="content">




    </div>
	</div><div id="DivideLast" class="method">
		<h4><strong>DivideLast</strong>() : <a href="../Nemerle.Builtins/Tuple`2.htm">Tuple['p0, 'p1]</a></h4>
		<div class="content"><p>Returns a list without its last element and the list's last element </p> 




    </div>
	</div><div id="Equals" class="method">
		<h4><strong>Equals</strong>(other : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <span title="System.bool">bool</span></h4>
		<div class="content">




    </div>
	</div><div id="Equals``1" class="method">
		<h4><strong>Equals.[TSecond]</strong>(lst2 : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, compare : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <span title="System.bool">bool</span></h4>
		<div class="content">




    </div>
	</div><div id="FilteredLength" class="method">
		<h4><strong>FilteredLength</strong>(f : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <span title="System.int">int</span></h4>
		<div class="content"><p>Returns the number of elements for which a predicate is true. </p> 




    </div>
	</div><div id="Find" class="method">
		<h4><strong>Find</strong>(pred : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/option`1.htm">option[T]</a></h4>
		<div class="content"><p>Finds the first elements for which a predicate is true. </p> 




    </div>
	</div><div id="FindAll" class="method">
		<h4><strong>FindAll</strong>(f : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>This is an alias for ``Filter'' </p> 




    </div>
	</div><div id="FindWithDefault" class="method">
		<h4><strong>FindWithDefault</strong>(default : <span title="Nemerle.Core.T">T</span>, pred : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <span title="Nemerle.Core.T">T</span></h4>
		<div class="content">




    </div>
	</div><div id="FirstN" class="method">
		<h4><strong>FirstN</strong>(n : <span title="System.int">int</span>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Returns first n elements of the list.
Works in time and memory O(n). </p> 




    </div>
	</div><div id="Flatten``1" class="method">
		<h4><strong>Flatten.[TOut]</strong>(selector : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="Flatten``1" class="method">
		<h4><strong>Flatten.[TOut]</strong>(selector : <a href="../Nemerle.Builtins/FunctionVoid`2.htm">FunctionVoid['p1, 'p2]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="FoldLeft``1" class="method">
		<h4><strong>FoldLeft.[TOut]</strong>(acc : <span title="Nemerle.Core.TOut">TOut</span>, f : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <span title="Nemerle.Core.TOut">TOut</span></h4>
		<div class="content">




    </div>
	</div><div id="FoldRight``1" class="method">
		<h4><strong>FoldRight.[TOut]</strong>(acc : <span title="Nemerle.Core.TOut">TOut</span>, f : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <span title="Nemerle.Core.TOut">TOut</span></h4>
		<div class="content">




    </div>
	</div><div id="ForAll2``1" class="method">
		<h4><strong>ForAll2.[TSecond]</strong>(lst2 : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, predicate : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <span title="System.bool">bool</span></h4>
		<div class="content">




    </div>
	</div><div id="GetElementType" class="method">
		<h4><strong>GetElementType</strong>() : <span title="System.Type">Type</span></h4>
		<div class="content">




    </div>
	</div><div id="Group" class="method">
		<h4><strong>Group</strong>(cmp : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="IterI" class="method">
		<h4><strong>IterI</strong>(acc : <span title="System.int">int</span>, f : <a href="../Nemerle.Builtins/FunctionVoid`2.htm">FunctionVoid['p1, 'p2]</a>) : <span title="System.void">void</span></h4>
		<div class="content">




    </div>
	</div><div id="LastN" class="method">
		<h4><strong>LastN</strong>(n : <span title="System.int">int</span>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="MapFiltered``1" class="method">
		<h4><strong>MapFiltered.[TOut]</strong>(predicate : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>, convert : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="MapToArray``1" class="method">
		<h4><strong>MapToArray.[TOut]</strong>(f : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <span title="Nemerle.Core.TOut[]">TOut[]</span></h4>
		<div class="content">




    </div>
	</div><div id="Nth" class="method">
		<h4><strong>Nth</strong>(n : <span title="System.int">int</span>) : <span title="Nemerle.Core.T">T</span></h4>
		<div class="content">




    </div>
	</div><div id="RemoveDuplicates" class="method">
		<h4><strong>RemoveDuplicates</strong>() : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="Rev" class="method">
		<h4><strong>Rev</strong>() : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Returns reversed list, i.e. Rev([1,2,3]) = [3,2,1].
Works in time and memory O(n). </p> 




    </div>
	</div><div id="RevAppend" class="method">
		<h4><strong>RevAppend</strong>(y : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Equivalent to Reverse().Append(y), but faster. </p> 




    </div>
	</div><div id="RevFilter" class="method">
		<h4><strong>RevFilter</strong>(f : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Removes elements for which predicate is false.
The resulting list is reversed (operation is faster this way). </p> 




    </div>
	</div><div id="RevFilterWhenNeeded" class="method">
		<h4><strong>RevFilterWhenNeeded</strong>(f : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content"><p>Return list, reversed or not, with elements not fulfilling [f] removed.
Avoid allocation if possible. </p> 




    </div>
	</div><div id="RevMap``1" class="method">
		<h4><strong>RevMap.[TOut]</strong>(f : <a href="../Nemerle.Builtins/Function`2.htm">Function['p1, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="Sort" class="method">
		<h4><strong>Sort</strong>(cmp : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div><div id="ToArray" class="method">
		<h4><strong>ToArray</strong>() : <span title="Nemerle.Core.T[]">T[]</span></h4>
		<div class="content">




    </div>
	</div><div id="Zip``1" class="method">
		<h4><strong>Zip.[TSecond]</strong>(second : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <a href="../Nemerle.Core/list`1.htm">list[T]</a></h4>
		<div class="content">




    </div>
	</div>

	<h3 class="section">Public static methods</h3>
<div id="IsOrdered``1" class="method">
		<h4><strong>IsOrdered.[TSecond]</strong>(lst : <a href="../Nemerle.Core/list`1.htm">list[T]</a>) : <span title="System.bool">bool</span></h4>
		<div class="content">




    </div>
	</div><div id="IsOrdered``1" class="method">
		<h4><strong>IsOrdered.[TSecond]</strong>(lst : <a href="../Nemerle.Core/list`1.htm">list[T]</a>, great : <a href="../Nemerle.Builtins/Function`3.htm">Function['p1, 'p2, 'r]</a>) : <span title="System.bool">bool</span></h4>
		<div class="content">




    </div>
	</div>

  <h3 class="section">Public properties</h3>
<div id="CovariantTail" class="method">
    <h4><strong>CovariantTail : <a href="../Nemerle.Collections/ICovariantList`1.htm">ICovariantList[T]</a></strong> get;
    </h4>
    <div class="content">

    </div>
  </div><div id="Head" class="method">
    <h4><strong>Head : <span title="Nemerle.Core.T">T</span></strong> get;
    </h4>
    <div class="content"><p>Returns head (first element) of list.
Given empty list throws System.ArgumentException. </p> 

    </div>
  </div><div id="IsEmpty" class="method">
    <h4><strong>IsEmpty : <span title="System.bool">bool</span></strong> get;
    </h4>
    <div class="content"><p>Returns true if the given list is empty. </p> 

    </div>
  </div><div id="Last" class="method">
    <h4><strong>Last : <span title="Nemerle.Core.T">T</span></strong> get;
    </h4>
    <div class="content"><p>Returns last element of list.
Given empty list throws InvalidArgument exception.
Works in time O(n) and memory O(1). </p> 

    </div>
  </div><div id="Length" class="method">
    <h4><strong>Length : <span title="System.int">int</span></strong> get;
    </h4>
    <div class="content">

    </div>
  </div><div id="Tail" class="method">
    <h4><strong>Tail : <a href="../Nemerle.Core/list`1.htm">list[T]</a></strong> get;
    </h4>
    <div class="content"><p>Returns tail (all elements except the first one) of list. </p> 

    </div>
  </div>
<div id="footer">
  <p>Based on v1.0.0.9832 of </p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>